# 소매상, 도매상(대표, 직원)
type User {
    id : Int,
    name : String,
    # 사업자번호(nullable)
    businessNo : String,
    deletedAt : LocalDate
    userCredential : UserCredential,
    authToken : AuthToken,
    # 보낸 거래처 신청
    appliedConnections(pagination : PaginationInput, filter : BizConnectionFilterInput) : [BizConnection!],
    # 받은 거래처 신청
    receivedConnections(pagination : PaginationInput, filter : BizConnectionFilterInput) : [BizConnection!],
    # 거래처 신청상태(토큰 내부 role에 기반하여 상대방과의 거래관계 상태값을 바로 가져옴)
    applyStatus : ApplyStatus,
    # 거래처 신청 테이블 고유값
    bizConnectionId : Int
}

# 유저의 로그인, 회원가입 정보
type UserCredential {
    id : Int,
    user: User,
    # 역할, 권한
    role : AccountRole,
    phoneNo : String,
    createdAt : LocalDate,
    deletedAt : LocalDate,
}

# 주의 : 서로 다른 Role 끼리 거래관계를 맺기 때문에 같은 role 의 데이터를 가져올 경우 데이터가 없습니다.
type BizConnection {
    id : Int,
    # 거래처 신청자(=소매상)
    retailer : User,
    # 거래처 신청 수취자(=도매상)
    wholesaler : User,
    # 거래처 신청 상태
    applyStatus : ApplyStatus,
    createdAt : LocalDate,
    deletedAt : LocalDate,
    updatedAt : LocalDate
}

type AuthToken{
    accessToken : String,
    refreshToken : String,
}

## -------------- QUERY ------------------
type Query {
    # 토큰으로 나의 정보 가져오기
    # - 거래처 목록 가져오기(내가 신청한 것만)
    me : User
    # 유저 목록 가져오기
    # - 거래처 목록 가져오기(전체 목록) : User > applyStatus 필드를 추가할 경우(내가 소매상이면 도매상 목록을 가져옴)
    # - 유저 전체 목록 가져오기 : User > applyStatus 필드 없는 경우
    getUsers(pagination : PaginationInput) : [User!]
}

## -------------- MUTATION ------------------
type Mutation{
    # 회원가입
    signUp(input : SignUpInput) : AuthToken
    # 로그인
    signIn(input : SignInInput) : AuthToken
    # 소매상 -> 도매상 거래처 신청
    applyBizConnection(wholesalerId : Int!) : BizConnection
    # 도매상 -> 소매상 거래처 신청처리(승낙, 거절)
    updateBizConnection(bizConnId : Int!, status : ApplyStatus): BizConnection
}


