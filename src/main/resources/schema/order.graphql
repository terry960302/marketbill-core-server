
type CartItem{
    id : Int!,
    retailer : User,
    wholesaler : User,
    flower : Flower,
    quantity : Int!,
    grade : String!,
    orderedAt : LocalDate,
    createdAt : LocalDate!,
    updatedAt : LocalDate!,
    deletedAt : LocalDate,
}

type OrderSheet{
    id : Int!,
    orderNo : String!,
    retailer : User,
    wholesaler : User,
    orderItems(pagination: PaginationInput) : [OrderItem!],
    # 주문서에 해당하는 꽃의 총 개수
    totalFlowerQuantity : Int,
    # 주문서에 해당하는 꽃의 품종 개수(중복x)
    totalFlowerTypeCount : Int,
    # 영수증 발행 여부
    hasReceipt : Boolean,
    orderSheetReceipts : [OrderSheetReceipt!],
    # 최신 영수증(가장 늦게 발행한 영수증)
    recentReceipt : OrderSheetReceipt,
    createdAt : LocalDate!,
    updatedAt : LocalDate!,
    deletedAt : LocalDate,
}

type OrderItem{
    id : Int!,
    orderSheet : OrderSheet,
    retailer : User,
    wholesaler : User,
    flower : Flower,
    quantity : Int!,
    grade : String!,
    price : Int,
    createdAt : LocalDate!,
    updatedAt : LocalDate!,
    deletedAt : LocalDate,
}

type OrderSheetReceipt{
    id : Int!,
    orderSheet : OrderSheet,
    # 파일경로
    filePath : String!,
    # 확장자명
    fileFormat : String,
    # 그외 메타데이터
    metadata : String,
    createdAt : LocalDate!,
    updatedAt : LocalDate!,
    deletedAt : LocalDate,
}

# 일자별 주문 집계
type OrderSheetsAggregate{
    # 날짜(date)
    date : LocalDate,
    # 꽃 종류 개수(중복x)
    flowerTypesCount  :Int,
    # 주문 수
    orderSheetsCount : Int,
}


## -------------- QUERY ------------------
extend type Query {
    # [소매상] 장바구니 항목들에 기등록된 거래처 정보 가져오기
    getCartWholesaler : User
    # [소매상] 장바구니 목록 가져오기
    getAllCartItems(pagination : PaginationInput) : [CartItem!]
    # [공통] 주문서 목록 가져오기
    getOrderSheets(filter : DateFilterInput,  pagination : PaginationInput) : [OrderSheet!],
    # [공통] 주문서 단건(상세) 가져오기
    getOrderSheet(orderSheetId : Int!) : OrderSheet,
    # [공통] 주문 항목 가져오기
    getOrderItems(filter : DateFilterInput,  pagination : PaginationInput) : [OrderItem!],
    # [도매상] 일자별 주문 집계 목록
    getAllDailyOrderSheetAggregates(pagination : PaginationInput) : [OrderSheetsAggregate!]
    # [도매상] 오늘의 주문합계
    # - date : "yyyy-MM-dd" 문자열 포맷(없는 경우 오늘 날짜 들어감)
    getDailyOrderSheetAggregate(date : String) : OrderSheetsAggregate
}
## -------------- MUTATION ------------------
extend type Mutation {
    # [소매상] 장바구니 담기
    addToCart(input : AddToCartInput) : CartItem!,
    # [소매상] 장바구니 항목 삭제
    removeCartItem(cartItemId : Int!) : CommonResponse!,
    # [소매상] 장바구니 항목 수정
    updateCartItem(input : UpdateCartItemInput) : CartItem
    # [소매상] 장바구니 거래처 설정 및 수정
    upsertWholesalerOnCartItems(wholesalerId : Int!) : [CartItem!],
    # [소매상] 장바구니 항목들 주문하기
    orderCartItems : OrderSheet,
    # [소매상] 주문서 삭제하기(주문 취소)
    removeOrderSheet(orderSheetId : Int!) : CommonResponse!,
    # [도매상] 주문 항목 수정
    updateOrderItemsPrice(items : [OrderItemPriceInput]) : [OrderItem!]
    # [도매상] 영수증 발행
    # - 파일처리 구축 후 실제 로직 적용 예정
    issueOrderSheetReceipt(orderSheetId : Int!) : OrderSheetReceipt,
    # 배치 장바구니 주문처리
    batchCartToOrder : CommonResponse!
}
